pipeline {
    agent any

    environment {
        TF_VERSION = '1.7.5'
        AZURE_SERVICE_CONNECTION = 'azure-service-principal'
        RESOURCE_GROUP = 'rg-jenkins'
        LOCATION = 'eastus'
        SUBSCRIPTION_ID = 'a98d0e19-0c0e-4a5b-91ac-c6923c6331bc'
        APP_SERVICE_PLAN = 'jenkins-app-service-plan'
        APP_SERVICE_WEBAPP_DOTNET = 'jenkins-yd-webapp'
    }

    stages {
        stage('Azure Login') {
            steps {
                withCredentials([azureServicePrincipal(
                    credentialsId: "${env.AZURE_SERVICE_CONNECTION}",
                    subscriptionIdVariable: 'SUBSCRIPTION_ID_DUMMY',
                    clientIdVariable: 'CLIENT_ID',
                    clientSecretVariable: 'CLIENT_SECRET',
                    tenantIdVariable: 'TENANT_ID'
                )]) {
                    bat """
                        echo Logging into Azure...
                        az login --service-principal -u %CLIENT_ID% -p %CLIENT_SECRET% --tenant %TENANT_ID% >nul
                    """
                }
            }
        }

        stage('Check & Create Resource Group') {
            steps {
                bat """
                    echo Checking Resource Group...
                    az group show --name ${env.RESOURCE_GROUP} --subscription ${env.SUBSCRIPTION_ID} >nul 2>&1 || az group create --name ${env.RESOURCE_GROUP} --location ${env.LOCATION} --subscription ${env.SUBSCRIPTION_ID}
                """
            }
        }

        stage('Terraform Init') {
            steps {
                bat 'terraform init'
            }
        }

        stage('Terraform Import Existing Resources') {
            steps {
                bat """
                    echo Importing Resource Group...
                    terraform state list | findstr azurerm_resource_group.rg || terraform import azurerm_resource_group.rg /subscriptions/${env.SUBSCRIPTION_ID}/resourceGroups/${env.RESOURCE_GROUP}

                    echo Importing App Service Plan...
                    terraform state list | findstr azurerm_service_plan.asp || terraform import azurerm_service_plan.asp /subscriptions/${env.SUBSCRIPTION_ID}/resourceGroups/${env.RESOURCE_GROUP}/providers/Microsoft.Web/serverFarms/${env.APP_SERVICE_PLAN}

                    echo Importing .NET Web App...
                    terraform state list | findstr azurerm_linux_web_app.webapp || terraform import azurerm_linux_web_app.webapp /subscriptions/${env.SUBSCRIPTION_ID}/resourceGroups/${env.RESOURCE_GROUP}/providers/Microsoft.Web/sites/${env.APP_SERVICE_WEBAPP_DOTNET}
                """
            }
        }

        stage('Terraform Plan') {
            steps {
                bat 'terraform plan'
            }
        }

        stage('Terraform Apply - Auto') {
            steps {
                bat 'terraform apply -auto-approve'
            }
        }

        stage('Build .NET 8 Web API') {
            steps {
                bat """
                    echo Building .NET 8 Web API...
                    dotnet clean
                    dotnet build --configuration Release
                    dotnet publish --configuration Release --output publish
                """
            }
        }

        stage('Deploy to Azure App Service') {
            steps {
                bat """
                    echo Deploying to Azure App Service...
                    az webapp deploy --resource-group ${env.RESOURCE_GROUP} --name ${env.APP_SERVICE_WEBAPP_DOTNET} --src-path publish --type zip
                """
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning up..."
                bat 'taskkill /F /IM terraform.exe || echo terraform.exe was not running.'

                bat """
                    echo Logging out from Azure...
                    az logout
                """
            }
            cleanWs(deleteDirs: true, disableDeferredWipeout: true)
        }
    }
}
