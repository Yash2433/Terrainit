pipeline {
    agent any

    environment {
        TF_VERSION = '1.7.5'
        AZURE_SERVICE_CONNECTION = 'azure-service-principal'
        RESOURCE_GROUP = 'rg-jenkins'
        LOCATION = 'eastus'
    }

    stages {
        stage('Azure Login & Set Environment') {
            steps {
                withCredentials([azureServicePrincipal(
                    credentialsId: "${env.AZURE_SERVICE_CONNECTION}",
                    subscriptionIdVariable: 'SUBSCRIPTION_ID',
                    clientIdVariable: 'CLIENT_ID',
                    clientSecretVariable: 'CLIENT_SECRET',
                    tenantIdVariable: 'TENANT_ID'
                )]) {
                    bat '''
                        echo Setting Azure environment variables...
                        set ARM_SUBSCRIPTION_ID=%SUBSCRIPTION_ID%
                        set ARM_CLIENT_ID=%CLIENT_ID%
                        set ARM_CLIENT_SECRET=%CLIENT_SECRET%
                        set ARM_TENANT_ID=%TENANT_ID%

                        echo Azure Login...
                        az login --service-principal -u %CLIENT_ID% -p %CLIENT_SECRET% --tenant %TENANT_ID%
                    '''
                }
            }
        }

        stage('Check & Create Resource Group') {
            steps {
                bat '''
                    echo Checking Resource Group...
                    az group show --name %RESOURCE_GROUP% --subscription %SUBSCRIPTION_ID% >nul 2>&1
                    
                    IF %ERRORLEVEL% EQU 0 (
                        echo Resource Group Exists.
                    ) ELSE (
                        echo Creating Resource Group...
                        az group create --name %RESOURCE_GROUP% --location %LOCATION% --subscription %SUBSCRIPTION_ID%
                    )
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                bat '''
                    echo Terraform Init...
                    terraform init
                '''
            }
        }

        stage('Terraform Import RG') {
            steps {
                bat '''
                    echo Importing Existing Resource Group...
                    terraform import azurerm_resource_group.rg /subscriptions/%SUBSCRIPTION_ID%/resourceGroups/%RESOURCE_GROUP% || echo Import skipped
                '''
            }
        }

        stage('Terraform Plan') {
            steps {
                bat 'terraform plan'
            }
        }

        stage('Terraform Apply - Auto') {
            steps {
                bat '''
                    echo Auto-Apply Terraform Changes...
                    terraform apply -auto-approve
                '''
            }
        }

        stage('Deployment Status') {
            steps {
                bat '''
                    echo Deployment Completed!
                '''
            }
        }
    }

    post {
        always {
            bat '''
                echo Azure Logout...
                az logout
            '''
            cleanWs()
        }
    }
}
