pipeline {
    agent any

    environment {
        TF_VERSION = '1.7.5'
        AZURE_SERVICE_CONNECTION = 'azure-service-principal'
    }

    stages {
        stage('Initialize Terraform') {
            steps {
                withCredentials([azureServicePrincipal(
                    credentialsId: "${env.AZURE_SERVICE_CONNECTION}",
                    subscriptionIdVariable: 'SUBSCRIPTION_ID',
                    clientIdVariable: 'CLIENT_ID',
                    clientSecretVariable: 'CLIENT_SECRET',
                    tenantIdVariable: 'TENANT_ID'
                )]) {
                    bat '''
                        echo Setting Azure environment variables
                        set ARM_SUBSCRIPTION_ID=%SUBSCRIPTION_ID%
                        set ARM_CLIENT_ID=%CLIENT_ID%
                        set ARM_CLIENT_SECRET=%CLIENT_SECRET%
                        set ARM_TENANT_ID=%TENANT_ID%

                        echo Initializing Terraform
                        terraform init
                    '''
                }
            }
        }

        stage('Terraform Import RG if exists') {
            steps {
                bat '''
                    echo Checking if Resource Group exists...
                    az login --service-principal -u %CLIENT_ID% -p %CLIENT_SECRET% --tenant %TENANT_ID%
                    az group show --name rg-jenkins --subscription %SUBSCRIPTION_ID% >nul 2>&1

                    IF %ERRORLEVEL% EQU 0 (
                        echo Resource Group exists. Importing...
                        terraform import azurerm_resource_group.rg /subscriptions/%SUBSCRIPTION_ID%/resourceGroups/rg-jenkins
                    ) ELSE (
                        echo Resource Group does not exist. Skipping import.
                    )
                '''
            }
        }

        stage('Terraform Plan') {
            steps {
                bat 'terraform plan'
            }
        }

        stage('Terraform Apply') {
            steps {
                input "Apply Terraform Changes?"
                bat 'terraform apply -auto-approve'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
